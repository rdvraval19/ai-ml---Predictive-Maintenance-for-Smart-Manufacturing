# -*- coding: utf-8 -*-
"""Copy of Operational Efficiency & Fault Prediction in Machi

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-HHZ9bM6QNP0tlrqCSdZm8pHl0kEKapM
"""



# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('manufacturing_6G_dataset.csv'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score

# Models
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
import xgboost as xgb
import lightgbm as lgb


import plotly.express as px
import plotly.graph_objects as go
from mpl_toolkits.mplot3d import Axes3D
from wordcloud import WordCloud
from sklearn.ensemble import RandomForestClassifier

df = pd.read_csv("manufacturing_6G_dataset.csv")

df.head()

df.isnull().sum()

df.duplicated().sum()

df.shape

df.info()

df.describe()

df.columns

plt.figure(figsize=(10,6))
sns.heatmap(df.isnull(), cmap='viridis', cbar=False)
plt.title("Missing Values Heatmap")
plt.show()

df.boxplot(figsize=(12,6))
plt.xticks(rotation=45)
plt.title("Boxplot of Numerical Features")
plt.show()

sns.pairplot(df, hue="Efficiency_Status", palette="husl")
plt.show()

sns.histplot(df["Temperature_C"], bins=30, kde=True, color="blue")
plt.title("Temperature Distribution")
plt.show()

plt.hist(df["Vibration_Hz"], bins=25, color='red', alpha=0.7)
plt.title("Vibration Frequency Histogram")
plt.show()

sns.kdeplot(df["Power_Consumption_kW"], shade=True, color="purple")
plt.title("Power Consumption Density")
plt.show()

sns.countplot(x=df["Operation_Mode"], palette="pastel")
plt.title("Operation Mode Count")
plt.show()

df["Efficiency_Status"].value_counts().plot(kind="bar", color=["blue", "orange", "green"])
plt.title("Efficiency Status Count")
plt.show()

sns.boxplot(y=df["Predictive_Maintenance_Score"], color="green")
plt.title("Boxplot of Predictive Maintenance Score")
plt.show()

sns.violinplot(y=df["Network_Latency_ms"], color="red")
plt.title("Violin Plot of Network Latency")
plt.show()

sns.scatterplot(x=df.index, y=df["Packet_Loss_%"], color="purple")
plt.title("Scatter Plot of Packet Loss Percentage")
plt.show()

df["Efficiency_Status"].value_counts().plot.pie(autopct="%1.1f%%", colors=["lightblue", "orange", "green"])
plt.title("Efficiency Status Pie Chart")
plt.ylabel("")
plt.show()

plt.figure(figsize=(10,5))
sns.lineplot(x=df["Timestamp"], y=df["Temperature_C"], color="blue")
plt.xticks(rotation=45)
plt.title("Temperature Over Time")
plt.show()

sns.scatterplot(x=df["Vibration_Hz"], y=df["Temperature_C"], hue=df["Efficiency_Status"], palette="coolwarm")
plt.title("Vibration vs Temperature")
plt.show()

sns.barplot(x="Operation_Mode", y="Production_Speed_units_per_hr", data=df, palette="muted")
plt.title("Production Speed by Operation Mode")
plt.show()

sns.boxplot(x="Operation_Mode", y="Error_Rate_%", data=df, palette="coolwarm")
plt.title("Error Rate by Operation Mode")
plt.show()

sns.pairplot(df, hue="Efficiency_Status", diag_kind="kde", palette="viridis")
plt.show()

fig = plt.figure(figsize=(8,8))
ax = fig.add_subplot(111, projection="3d")
ax.scatter(df["Temperature_C"], df["Vibration_Hz"], df["Power_Consumption_kW"], c="blue", marker="o")
ax.set_xlabel("Temperature")
ax.set_ylabel("Vibration")
ax.set_zlabel("Power Consumption")
plt.title("3D Scatter Plot")
plt.show()

g = sns.FacetGrid(df, col="Efficiency_Status")
g.map(sns.histplot, "Production_Speed_units_per_hr")
plt.show()

sns.lineplot(x=df["Temperature_C"], y=df["Predictive_Maintenance_Score"], hue=df["Efficiency_Status"])
plt.title("Temperature vs Maintenance Score")
plt.show()

fig = px.sunburst(df, path=["Operation_Mode", "Efficiency_Status"], values="Production_Speed_units_per_hr")
fig.show()

fig = px.treemap(df, path=["Machine_ID", "Efficiency_Status"], values="Power_Consumption_kW")
fig.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import xgboost as xgb
import lightgbm as lgb
import catboost as cb
import warnings
warnings.filterwarnings("ignore")

le = LabelEncoder()
for col in df.select_dtypes(include=['object']).columns:
    df[col] = le.fit_transform(df[col])

X = df.drop("Efficiency_Status", axis=1)  # Independent Variables
y = df["Efficiency_Status"]                # Target Variable

plt.figure(figsize=(12,6))
sns.heatmap(df.corr(), annot=True, cmap="coolwarm")
plt.title("Feature Correlation Heatmap")
plt.show()

from sklearn.feature_selection import SelectFromModel

rf = RandomForestClassifier(n_estimators=100)
rf.fit(X, y)
sfm = SelectFromModel(rf, threshold=0.01)
X_selected = sfm.transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_selected, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

models = {
    "Logistic Regression": LogisticRegression(),
    "K-Nearest Neighbors": KNeighborsClassifier(),
    "Support Vector Machine": SVC(),
    "Decision Tree": DecisionTreeClassifier(),
    "Random Forest": RandomForestClassifier(),
    "Gradient Boosting": GradientBoostingClassifier(),
    "Naive Bayes": GaussianNB(),
    "XGBoost": xgb.XGBClassifier(),
    "LightGBM": lgb.LGBMClassifier(),
    "CatBoost": cb.CatBoostClassifier(verbose=0)
}

results = {}

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    results[name] = accuracy
    print(f"{name}: {accuracy:.4f}")
    print(classification_report(y_test, y_pred))

plt.figure(figsize=(12,5))
sns.barplot(x=list(results.keys()), y=list(results.values()), palette="coolwarm")
plt.xticks(rotation=45)
plt.ylabel("Accuracy")
plt.title("Model Accuracy Comparison")
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix, roc_curve, auc, precision_recall_curve

# Function to plot confusion matrix
def plot_confusion_matrix(y_true, y_pred, model_name):
    cm = confusion_matrix(y_true, y_pred)
    plt.figure(figsize=(6, 4))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Class 0', 'Class 1'], yticklabels=['Class 0', 'Class 1'])
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    plt.title(f'Confusion Matrix - {model_name}')
    plt.show()

for name, model in models.items():
    y_pred = model.predict(X_test)
    plot_confusion_matrix(y_test, y_pred, name)